}
else{
cat("ERROR: directing the edges is not possible. Check if something is wrong with the graph.")
return(pdag)
}
}
else{
#all edges are directed already. No extra edges need to be directed.
return(pdag)
}
}
}
}
}
pdag2 <- lead_abs(pdag, abs_groups)
add_abstraction <- function(pdag, abs_group1, abs_group2){
abs_group1 <- as.numeric(noquote(gsub("[^0-9]","", abs_group1)))
abs_group2 <- as.numeric(noquote(gsub("[^0-9]","", abs_group2)))
dir_list <- check_directed_edges(pdag, abs_group1, abs_group2)
v_structures <- number_v_nodes(pdag)
if (length(dir_list) == 0){
#this means there are no directed edges between the pair
#we try both directions of the edges
## pointing the one way
pdag1 <- change_direction(pdag, abs_group1, abs_group2)
dir1 <- is_direction_possible(pdag1, v_structures)
## pointing the other way
pdag2 <- change_direction(pdag, abs_group2, abs_group1)
dir2 <- is_direction_possible(pdag2, v_structures)
if(dir1 && dir2){
#this means that both directions are possible
#we return the message "both_directions_possible"
return("both_directions_possible")
}
if(dir1 && !dir2){
#this means that the direction abs_group1 --> abs_group2 is the only possible direction
pdag <- apply_mec_rules(pdag1)
return(pdag)
}
if(!dir1 && dir2){
#this means that the direction abs_group1 <- abs_group2 is the only possible direction
pdag <- apply_mec_rules(pdag2)
return(pdag)
}
if(!dir1 && !dir2){
#this means that both directions are not possible
#the original pdag is returned, without any directed edges
return(pdag)
}
}
else if (length(dir_list) == 2){
#this means that there is one directed edge between the pair of clusters
#we convert the other edges the same way
group1_check <- check_direction(pdag, dir_list, abs_group1)
if(!(group1_check)){
q <- abs_group1
abs_group1 <- abs_group2
abs_group2 <- q
}
pdag <- change_direction(pdag, abs_group1, abs_group2)
check <- is_direction_possible(pdag, v_structures)
if(check){
pdag <- apply_mec_rules(pdag)
return(pdag)
}
else{
cat("ERROR: directing the edges is not possible. Check if something is wrong with the graph.")
return(pdag)
}
}
else {
#this means that multiple directed edges are found between the pair of clusters
#we need to check if they are directed the same way, and direct the other edges
leftrightlist <- list_dir_edges(dir_list)
result <- match_dir_edges(leftrightlist$left, leftrightlist$right, abs_group1)
if(result == "error"){
cat("ERROR: the edges are not directed the same way. An abstraction is impossible!")
return(pdag)
}
else if(result == "left"){
#the directed edges point the same way
for(i in abs_group1){
if (!(i %in% leftrightlist$left)){
#not all edges are directed yet
group1_check <- check_direction(pdag, dir_list, abs_group1)
if(!(group1_check)){
q <- abs_group1
abs_group1 <- abs_group2
abs_group2 <- q
}
pdag <- change_direction(pdag, abs_group1, abs_group2)
check <- is_direction_possible(pdag, v_structures)
if(check){
pdag <- apply_mec_rules(pdag)
return(pdag)
}
else{
cat("ERROR: directing the edges is not possible. Check if something is wrong with the graph.")
return(pdag)
}
}
else{
#all edges are directed already. No extra edges need to be directed.
return(pdag)
}
}
}
else if(result == "right"){
#the directed edges point the same way
for(i in abs_group1){
if (!(i %in% leftrightlist$right)){
#not all edges are directed yet
group1_check <- check_direction(pdag, dir_list, abs_group1)
if(!(group1_check)){
q <- abs_group1
abs_group1 <- abs_group2
abs_group2 <- q
}
pdag <- change_direction(pdag, abs_group1, abs_group2)
check <- is_direction_possible(pdag, v_structures)
if(check){
pdag <- apply_mec_rules(pdag)
return(pdag)
}
else{
cat("ERROR: directing the edges is not possible. Check if something is wrong with the graph.")
return(pdag)
}
}
else{
#all edges are directed already. No extra edges need to be directed.
return(pdag)
}
}
}
}
}
## function that changes all undirected edges into directed edges
## the edges are directed as abs_group1 --> abs_group2
## input: the pdag and the two abstraction groups
## output: the directed pdag
change_direction <- function(pdag, abs_group1, abs_group2){
for(i in seq_along(abs_group1)){
a <- abs_group1[i]
b <- abs_group2[i]
if(pdag[a,b] == 1 & pdag[b,a] == 1){
pdag[b,a] <- 0
}
}
return(pdag)
}
pdag2 <- lead_abs(pdag, abs_groups)
## Leading function ("the leading part")
## takes as input the pdag and all the groups (all Zs)
## loops over the groups to decide which are pairs (i.e. which have connected edges)
## decides the order of directing edges between pairs
## first, the pairs are directed that have 1 or more directed edges
## last, all pairs that have no directed edges are directed
## all pairs are sent to the add_abstraction function to direct the edges
## output: the new pdag, with all directed edges in it
lead_abs <- function(pdag, abs_groups){
original_pdag <- pdag
undirected_list <- list()
for(i in 1:length(abs_groups)){
cat("\nworking on abs_group ", i)
for(z in i:length(abs_groups)){
if((z+1) <= length(abs_groups)){
absList <- find_edge_between_groups(pdag, abs_groups[[i]], abs_groups[[z+1]])
if(length(absList$abs_group1) > 0){
cat("\nfound connecting edges")
group1 <- noquote(gsub("[^0-9]","", absList$abs_group1))
group2 <- noquote(gsub("[^0-9]","", absList$abs_group2))
dir_list <- check_directed_edges(pdag, group1, group2)
if(!is.null(dir_list)){
cat("\ndirected edges found between groups")
pdag <- add_abstraction(pdag, absList$abs_group1, absList$abs_group2)
}
else {
cat("\nno directed edges found between groups")
undirected_list <- append(undirected_list, absList)
}
}
}
}
}
if(length(undirected_list) > 0){
cat("\nstart with undirected list")
print(length(undirected_list))
pdag_changed <- FALSE
repeat{
for(i in seq(1, length(undirected_list), by=2)){
new_pdag <- add_abstraction(pdag, undirected_list[i]$abs_group1, undirected_list[i+1]$abs_group2)
if(new_pdag != "both_directions_possible"){
print("pdag changed")
pdag_changed <- TRUE
pdag <- new_pdag
undirected_list[i] <- NULL
undirected_list[i] <- NULL
}
}
if(pdag_changed == TRUE)
pdag_changed <- FALSE
else if(pdag_changed == FALSE || length(undirected_list == 0))
break
}
}
# check for cycles on the highlevel!
cycle_check <- check_highlevel_cycles(pdag, abs_groups)
if(cycle_check){
cat("\nERROR: directing the edges creates a cycle on the high-level. The original pdag is returned")
return(original_pdag)
}
else {
cat("\nno cycles found on the high-level. Directing the edges as such has been approved.")
return(pdag)
}
}
pdag2 <- lead_abs(pdag, abs_groups)
## Leading function ("the leading part")
## takes as input the pdag and all the groups (all Zs)
## loops over the groups to decide which are pairs (i.e. which have connected edges)
## decides the order of directing edges between pairs
## first, the pairs are directed that have 1 or more directed edges
## last, all pairs that have no directed edges are directed
## all pairs are sent to the add_abstraction function to direct the edges
## output: the new pdag, with all directed edges in it
lead_abs <- function(pdag, abs_groups){
original_pdag <- pdag
undirected_list <- list()
for(i in 1:length(abs_groups)){
cat("\nworking on abs_group ", i)
for(z in i:length(abs_groups)){
if((z+1) <= length(abs_groups)){
absList <- find_edge_between_groups(pdag, abs_groups[[i]], abs_groups[[z+1]])
if(length(absList$abs_group1) > 0){
cat("\nfound connecting edges")
group1 <- noquote(gsub("[^0-9]","", absList$abs_group1))
group2 <- noquote(gsub("[^0-9]","", absList$abs_group2))
dir_list <- check_directed_edges(pdag, group1, group2)
if(!is.null(dir_list)){
cat("\ndirected edges found between groups")
pdag <- add_abstraction(pdag, absList$abs_group1, absList$abs_group2)
}
else {
cat("\nno directed edges found between groups")
undirected_list <- append(undirected_list, absList)
}
}
}
}
}
if(length(undirected_list) > 0){
cat("\nstart with undirected list")
print(length(undirected_list))
pdag_changed <- FALSE
repeat{
for(i in seq(1, length(undirected_list), by=2)){
new_pdag <- add_abstraction(pdag, undirected_list[i]$abs_group1, undirected_list[i+1]$abs_group2)
if(new_pdag != "both_directions_possible"){
print("pdag changed")
pdag_changed <- TRUE
pdag <- new_pdag
undirected_list[i] <- NULL
undirected_list[i] <- NULL
}
}
if(length(undirected_list == 0 || pdag_changed == FALSE))
break
else
pdag_changed <- FALSE
}
}
# check for cycles on the highlevel!
cycle_check <- check_highlevel_cycles(pdag, abs_groups)
if(cycle_check){
cat("\nERROR: directing the edges creates a cycle on the high-level. The original pdag is returned")
return(original_pdag)
}
else {
cat("\nno cycles found on the high-level. Directing the edges as such has been approved.")
return(pdag)
}
}
pdag2 <- lead_abs(pdag, abs_groups)
## Leading function ("the leading part")
## takes as input the pdag and all the groups (all Zs)
## loops over the groups to decide which are pairs (i.e. which have connected edges)
## decides the order of directing edges between pairs
## first, the pairs are directed that have 1 or more directed edges
## last, all pairs that have no directed edges are directed
## all pairs are sent to the add_abstraction function to direct the edges
## output: the new pdag, with all directed edges in it
lead_abs <- function(pdag, abs_groups){
original_pdag <- pdag
undirected_list <- list()
for(i in 1:length(abs_groups)){
cat("\nworking on abs_group ", i)
for(z in i:length(abs_groups)){
if((z+1) <= length(abs_groups)){
absList <- find_edge_between_groups(pdag, abs_groups[[i]], abs_groups[[z+1]])
if(length(absList$abs_group1) > 0){
cat("\nfound connecting edges")
group1 <- noquote(gsub("[^0-9]","", absList$abs_group1))
group2 <- noquote(gsub("[^0-9]","", absList$abs_group2))
dir_list <- check_directed_edges(pdag, group1, group2)
if(!is.null(dir_list)){
cat("\ndirected edges found between groups")
pdag <- add_abstraction(pdag, absList$abs_group1, absList$abs_group2)
}
else {
cat("\nno directed edges found between groups")
undirected_list <- append(undirected_list, absList)
}
}
}
}
}
if(length(undirected_list) > 0){
cat("\nstart with undirected list")
print(length(undirected_list))
pdag_changed <- FALSE
repeat{
for(i in seq(1, length(undirected_list), by=2)){
new_pdag <- add_abstraction(pdag, undirected_list[i]$abs_group1, undirected_list[i+1]$abs_group2)
if(new_pdag != "both_directions_possible"){
print("pdag changed")
pdag_changed <- TRUE
pdag <- new_pdag
undirected_list[i] <- NULL
undirected_list[i] <- NULL
}
}
if(length(undirected_list == 0) || pdag_changed == FALSE)
break
else
pdag_changed <- FALSE
}
}
# check for cycles on the highlevel!
cycle_check <- check_highlevel_cycles(pdag, abs_groups)
if(cycle_check){
cat("\nERROR: directing the edges creates a cycle on the high-level. The original pdag is returned")
return(original_pdag)
}
else {
cat("\nno cycles found on the high-level. Directing the edges as such has been approved.")
return(pdag)
}
}
pdag2 <- lead_abs(pdag, abs_groups)
## Leading function ("the leading part")
## takes as input the pdag and all the groups (all Zs)
## loops over the groups to decide which are pairs (i.e. which have connected edges)
## decides the order of directing edges between pairs
## first, the pairs are directed that have 1 or more directed edges
## last, all pairs that have no directed edges are directed
## all pairs are sent to the add_abstraction function to direct the edges
## output: the new pdag, with all directed edges in it
lead_abs <- function(pdag, abs_groups){
original_pdag <- pdag
undirected_list <- list()
for(i in 1:length(abs_groups)){
cat("\nworking on abs_group ", i)
for(z in i:length(abs_groups)){
if((z+1) <= length(abs_groups)){
absList <- find_edge_between_groups(pdag, abs_groups[[i]], abs_groups[[z+1]])
if(length(absList$abs_group1) > 0){
cat("\nfound connecting edges")
group1 <- noquote(gsub("[^0-9]","", absList$abs_group1))
group2 <- noquote(gsub("[^0-9]","", absList$abs_group2))
dir_list <- check_directed_edges(pdag, group1, group2)
if(!is.null(dir_list)){
cat("\ndirected edges found between groups")
pdag <- add_abstraction(pdag, absList$abs_group1, absList$abs_group2)
}
else {
cat("\nno directed edges found between groups")
undirected_list <- append(undirected_list, absList)
}
}
}
}
}
if(length(undirected_list) > 0){
cat("\nstart with undirected list")
print(length(undirected_list))
pdag_changed <- FALSE
repeat{
for(i in seq(1, length(undirected_list), by=2)){
new_pdag <- add_abstraction(pdag, undirected_list[i]$abs_group1, undirected_list[i+1]$abs_group2)
if(new_pdag != "both_directions_possible"){
print("pdag changed")
pdag_changed <- TRUE
pdag <- new_pdag
undirected_list[i] <- NULL
undirected_list[i] <- NULL
}
}
if(length(undirected_list) == 0 || pdag_changed == FALSE)
break
else
pdag_changed <- FALSE
}
}
# check for cycles on the highlevel!
cycle_check <- check_highlevel_cycles(pdag, abs_groups)
if(cycle_check){
cat("\nERROR: directing the edges creates a cycle on the high-level. The original pdag is returned")
return(original_pdag)
}
else {
cat("\nno cycles found on the high-level. Directing the edges as such has been approved.")
return(pdag)
}
}
pdag2 <- lead_abs(pdag, abs_groups)
a = list("x1", "x2", "x3", "x4", "x5", "x6")
b = list("x7", "x8", "x9")
c = list("x10", "x11")
abs_groups = list(a, b, c)
abs_groups
pdag2 <- lead_abs(pdag, abs_groups)
## Leading function ("the leading part")
## takes as input the pdag and all the groups (all Zs)
## loops over the groups to decide which are pairs (i.e. which have connected edges)
## decides the order of directing edges between pairs
## first, the pairs are directed that have 1 or more directed edges
## last, all pairs that have no directed edges are directed
## all pairs are sent to the add_abstraction function to direct the edges
## output: the new pdag, with all directed edges in it
lead_abs <- function(pdag, abs_groups){
original_pdag <- pdag
undirected_list <- list()
for(i in 1:length(abs_groups)){
cat("\nworking on abs_group ", i)
for(z in i:length(abs_groups)){
if((z+1) <= length(abs_groups)){
absList <- find_edge_between_groups(pdag, abs_groups[[i]], abs_groups[[z+1]])
if(length(absList$abs_group1) > 0){
cat("\nfound connecting edges")
group1 <- noquote(gsub("[^0-9]","", absList$abs_group1))
group2 <- noquote(gsub("[^0-9]","", absList$abs_group2))
dir_list <- check_directed_edges(pdag, group1, group2)
if(!is.null(dir_list)){
cat("\ndirected edges found between groups")
pdag <- add_abstraction(pdag, absList$abs_group1, absList$abs_group2)
}
else {
cat("\nno directed edges found between groups")
undirected_list <- append(undirected_list, absList)
}
}
}
}
}
if(length(undirected_list) > 0){
cat("\nstart with undirected list")
print(length(undirected_list))
pdag_changed <- FALSE
repeat{
for(i in seq(1, length(undirected_list), by=2)){
new_pdag <- add_abstraction(pdag, undirected_list[i]$abs_group1, undirected_list[i+1]$abs_group2)
if(all(new_pdag != "both_directions_possible")){
pdag_changed <- TRUE
pdag <- new_pdag
undirected_list[i] <- NULL
undirected_list[i] <- NULL
}
}
if(length(undirected_list) == 0 || pdag_changed == FALSE)
break
else
pdag_changed <- FALSE
}
}
# check for cycles on the highlevel!
cycle_check <- check_highlevel_cycles(pdag, abs_groups)
if(cycle_check){
cat("\nERROR: directing the edges creates a cycle on the high-level. The original pdag is returned")
return(original_pdag)
}
else {
cat("\nno cycles found on the high-level. Directing the edges as such has been approved.")
return(pdag)
}
}
pdag2 <- lead_abs(pdag, abs_groups)
x1 <- rnorm(4000)
x2 <- x1 + rnorm(4000)
x3 <- x2 + rnorm(4000)
x4 <- x2 + rnorm(4000)
x5 <- x3 + x4 + rnorm(4000)
dat <- cbind(x1, x2, x3, x4, x5)
labels <- colnames(dat)
n <- nrow(dat)
pc.fit <- pc(suffStat = list(C = cor(dat), n = n),
indepTest = gaussCItest, alpha = 0.01,
labels = labels, verbose = TRUE)
pc.fit
plot(pc.fit)
#the skeleton, needed to find the pdag (pattern)
skel <- skeleton(suffStat = list(C = cor(dat), n=n),
indepTest = gaussCItest, alpha = 0.01,
labels = labels, verbose = TRUE)
skel
plot(skel)
find_pattern(skel)
pdag_skel <- find_pattern(skel)
plot(pdag_skel)
test2 <- as(pdag_skel, "graphNEL")
test2
plot(test2)
